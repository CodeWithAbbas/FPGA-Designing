library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity RAM is
Generic 
(     
	addr_width  	: integer := 4;  -- Address is 4 bits
    data_width   	: integer := 8   -- Data is 8 bits
    -- 2^Addr_width * data_width = 2^4 * 8 RAM = 16 * 8 RAM => 4 Memory Locations each having 8 bits of data
);
port(
 ADDR: in std_logic_vector(addr_width-1 downto 0); 
 DIN: in std_logic_vector(data_width-1 downto 0);
 WE: in std_logic; 
 CLK: in std_logic; 
 DOUT: out std_logic_vector(data_width-1 downto 0)
);
end RAM;

architecture arch of RAM is

type ram_array is array (0 to 2**addr_width-1) of std_logic_vector (data_width-1 downto 0);
signal ram_memory : ram_array := (x"4",x"1",x"6", x"3", x"9", x"2", x"8", x"5");

begin
	process(CLK)
	begin
		if(rising_edge(CLK)) then
			
			if(WE='1') then 
				ram_memory(conv_integer(ADDR)) <= DIN;
			else
				DOUT <= ram_memory(conv_integer(ADDR));
			end if;
		end if;
	end process;
	
end arch;